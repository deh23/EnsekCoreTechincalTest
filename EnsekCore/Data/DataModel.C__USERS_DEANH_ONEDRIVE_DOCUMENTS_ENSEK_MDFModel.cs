//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 09/10/2020 17:32:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EnsekCore
{

    public partial class EnsekModel : DbContext
    {

        public EnsekModel() :
            base()
        {
            OnCreated();
        }

        public EnsekModel(DbContextOptions<EnsekModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;Initial Catalog=C:\USERS\DEANH\ONEDRIVE\DOCUMENTS\ENSEK.MDF;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<MeterReading> MeterReadings
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.MeterReadingMapping(modelBuilder);
            this.CustomizeMeterReadingMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region MeterReading Mapping

        private void MeterReadingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MeterReading>().ToTable(@"MeterReadings", @"dbo");
            modelBuilder.Entity<MeterReading>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<MeterReading>().Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<MeterReading>().Property(x => x.MeterReadingDateTime).HasColumnName(@"MeterReadingDateTime").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<MeterReading>().Property(x => x.MeterReadValue).HasColumnName(@"MeterReadValue").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<MeterReading>().HasKey(@"Id");
            modelBuilder.Entity<MeterReading>().HasIndex(@"AccountId", @"MeterReadingDateTime", @"MeterReadValue").IsUnique(true).HasName(@"CK_UNQIUE_ROW");
        }

        partial void CustomizeMeterReadingMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"dbo");
            modelBuilder.Entity<User>().Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<User>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<User>().HasKey(@"AccountId");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MeterReading>().HasOne(x => x.User).WithMany(op => op.MeterReadings).IsRequired(true).HasForeignKey(@"AccountId");

            modelBuilder.Entity<User>().HasMany(x => x.MeterReadings).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"AccountId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
